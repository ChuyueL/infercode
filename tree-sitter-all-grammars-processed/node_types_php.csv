>=
and
*=
/=
namespace_use_group_clause
pair
]
namespace_use_group
relative_scope
~
array_element_initializer
return
protected
:
^=
named_label_statement
use
%
>
trait
null
&
catch_clause
switch_statement
require_once_expression
require
shell_command_expression
const
break_statement
_type
sequence_expression
goto_statement
continue
===
::
)
@
_statement
list_literal
cast_expression
endif
class_declaration
anonymous_function_creation_expression
string
property_element
unset
object
break
elseif
?
use_instead_of_clause
+
var_modifier
echo_statement
global_declaration
exponentiation_expression
for_statement
default_statement
clone
void
augmented_assignment_expression
do
<=>
do_statement
namespace_use_declaration
interface
include
??
callable
goto
primitive_type
iterable
name
static_modifier
unary_op_expression
base_clause
.
bool
yield
interface_declaration
require_expression
public
xor
switch
encoding
qualified_name
=
if
for
/
list
formal_parameters
int
variadic_parameter
global
parent
%=
namespace_aliasing_clause
\
self
expression_statement
endswitch
namespace_name
use_list
;
<<=
include_expression
strict_types
new
property_declaration
^
}
>>
while_statement
namespace_definition
namespace_name_as_prefix
.=
clone_expression
static_variable_declaration
**
as
double
endwhile
try_statement
|
continue_statement
arguments
<
<<
dynamic_variable_name
<=
text
_expression
anonymous_function_use_clause
const_declaration
private
,
class_interface_clause
function_call_expression
finally_clause
declaration_list
**=
boolean
foreach
return_statement
print
scoped_call_expression
else
||
empty_statement
instanceof
finally
extends
catch
final
binary
php_tag
variable_name
real
visibility_modifier
function
parenthesized_expression
const_element
default
program
endfor
yield_expression
cast_type
!=
*
use_declaration
namespace
declare_directive
else_clause
-=
require_once
colon_block
subscript_expression
trait_declaration
+=
--
=>
try
class
optional_type
throw_statement
!
class_constant_access_expression
namespace_use_clause
member_access_expression
|=
class_modifier
heredoc
insteadof
binary_expression
ticks
else_if_clause
static
integer
declare
include_once
foreach_statement
from
use_as_clause
!==
[
array
throw
_literal
assignment_expression
scoped_property_access_expression
>>=
variadic_unpacking
(
==
case
{
_primary_expression
compound_statement
include_once_expression
while
property_initializer
simple_parameter
?>
echo
<>
case_statement
type_name
function_static_declaration
&&
...
->
enddeclare
implements
declare_statement
print_intrinsic
$
-
array_creation_expression
if_statement
member_call_expression
object_creation_expression
float
switch_block
unset_statement
update_expression
++
endforeach
method_declaration
abstract
or
&=
function_definition
conditional_expression
