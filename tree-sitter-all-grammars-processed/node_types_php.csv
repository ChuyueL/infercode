list_literal
_primary_expression
namespace_aliasing_clause
static_modifier
augmented_assignment_expression
extends
trait
-
break
dynamic_variable_name
catch_clause
===
const_element
class_constant_access_expression
named_label_statement
finally_clause
case_statement
use_list
;
|=
_statement
namespace
use_declaration
require_once
string
finally
cast_type
function_definition
ticks
--
switch_statement
echo
.
or
||
include_expression
else_clause
namespace_name
static
interface_declaration
binary
+=
empty_statement
shell_command_expression
protected
foreach_statement
declare_directive
unset_statement
namespace_use_clause
namespace_definition
binary_expression
encoding
>>=
!=
<=>
int
<<
{
sequence_expression
try
continue
!
function_call_expression
endswitch
conditional_expression
declare_statement
array
variadic_parameter
use
class_modifier
scoped_property_access_expression
print_intrinsic
|
new
yield_expression
function_static_declaration
anonymous_function_creation_expression
return_statement
<>
use_as_clause
include
throw
:
parent
print
**=
parenthesized_expression
class_declaration
$
unset
elseif
->
<=
double
object
while
require_expression
for_statement
xor
<
throw_statement
_literal
array_creation_expression
static_variable_declaration
integer
default
exponentiation_expression
enddeclare
endfor
php_tag
array_element_initializer
base_clause
assignment_expression
colon_block
!==
*
@
abstract
namespace_use_declaration
~
qualified_name
final
primitive_type
clone_expression
type_name
do_statement
endwhile
include_once
\
clone
=
const_declaration
continue_statement
&&
float
compound_statement
(
^
member_access_expression
function
heredoc
%=
insteadof
iterable
list
/
text
%
implements
while_statement
var_modifier
program
cast_expression
case
relative_scope
trait_declaration
?>
update_expression
endforeach
if
=>
for
+
private
[
simple_parameter
variadic_unpacking
const
-=
property_element
use_instead_of_clause
class
_expression
expression_statement
_type
::
switch_block
*=
real
yield
self
namespace_use_group
**
callable
global_declaration
and
formal_parameters
<<=
goto
goto_statement
??
,
.=
)
>>
optional_type
variable_name
else
method_declaration
interface
bool
name
declare
]
unary_op_expression
class_interface_clause
instanceof
default_statement
break_statement
declaration_list
namespace_use_group_clause
try_statement
visibility_modifier
...
>=
if_statement
else_if_clause
member_call_expression
==
/=
?
boolean
^=
do
endif
public
strict_types
switch
arguments
void
anonymous_function_use_clause
require
global
return
&
&=
from
require_once_expression
echo_statement
pair
object_creation_expression
subscript_expression
property_initializer
catch
foreach
include_once_expression
property_declaration
scoped_call_expression
as
null
++
namespace_name_as_prefix
}
>
