>=
catch_type
*=
/=
assert
method_invocation
super_interfaces
]
interface_body
try_with_resources_statement
~
hex_floating_point_literal
return
protected
_simple_type
explicit_constructor_invocation
field_access
:
^=
to
%
ternary_expression
>
block
>>>=
&
catch_clause
switch_statement
decimal_floating_point_literal
variable_declarator
_type
break_statement
enum_constant
continue
lambda_expression
::
)
@
scoped_type_identifier
cast_expression
catch_formal_parameter
class_declaration
native
type_arguments
transitive
super
receiver_parameter
constructor_body
binary_integer_literal
break
short
package_declaration
?
long
+
type_identifier
for_statement
constant_declaration
module
do
annotation
do_statement
exports
interface
class_body
import
declaration
superclass
@interface
package
import_declaration
.
static_initializer
interface_declaration
switch_label
public
switch
=
if
scoped_identifier
for
/
requires
annotation_type_element_declaration
formal_parameters
false
int
formal_parameter
type_parameter
method_reference
%=
enhanced_for_statement
expression_statement
enum_body_declarations
module_body
annotation_type_body
array_access
resource
;
char
<<=
opens
statement
new
^
}
>>
array_type
while_statement
uses
inferred_parameters
double
|
character_literal
marker_annotation
enum
try_statement
true
continue_statement
<
requires_modifier
<<
<=
generic_type
private
octal_integer_literal
local_variable_declaration
primary_expression
integral_type
argument_list
finally_clause
,
||
return_statement
modifiers
else
instanceof
finally
extends
with
catch
final
strictfp
this
identifier
parenthesized_expression
default
transient
program
constructor_declaration
!=
annotation_type_declaration
*
-=
array_initializer
wildcard
+=
--
try
class
synchronized
class_literal
enum_declaration
throw_statement
!
void_type
interface_type_list
decimal_integer_literal
annotation_argument_list
|=
binary_expression
annotated_type
static
instanceof_expression
unary_expression
type_bound
>>>
string_literal
[
comment
throw
dimensions_expr
_literal
assignment_expression
labeled_statement
spread_parameter
>>=
(
case
==
module_directive
{
hex_integer_literal
while
enum_body
null_literal
_unannotated_type
dimensions
type_parameters
field_declaration
throws
...
&&
implements
extends_interfaces
->
byte
synchronized_statement
element_value_array_initializer
-
open
array_creation_expression
if_statement
object_creation_expression
floating_point_type
float
asterisk
module_declaration
switch_block
update_expression
++
boolean_type
method_declaration
resource_specification
abstract
element_value_pair
&=
provides
volatile
expression
assert_statement
