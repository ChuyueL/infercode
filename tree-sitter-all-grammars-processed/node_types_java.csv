annotation_argument_list
enum_constant
extends
interface_type_list
-
break
catch_clause
native
;
module_declaration
finally_clause
|=
scoped_identifier
variable_declarator
type_identifier
finally
super
--
assert
field_declaration
switch_statement
.
_simple_type
||
constructor_declaration
boolean_type
volatile
static
interface_declaration
+=
requires_modifier
provides
protected
comment
catch_formal_parameter
binary_expression
integral_type
}
dimensions_expr
explicit_constructor_invocation
!=
>>=
int
<<
array_access
assert_statement
{
try
continue
!
lambda_expression
synchronized_statement
|
enum_body
transitive
primary_expression
import
new
@interface
return_statement
method_reference
throw
:
parenthesized_expression
class_declaration
constant_declaration
expression
superclass
->
<=
class_body
hex_floating_point_literal
super_interfaces
for_statement
block
<
throw_statement
type_arguments
_literal
annotated_type
array_creation_expression
local_variable_declaration
open
enum
default
_unannotated_type
byte
import_declaration
assignment_expression
switch_label
*
ternary_expression
@
abstract
~
decimal_floating_point_literal
final
declaration
opens
requires
this
module_body
do_statement
statement
resource
generic_type
exports
=
float
continue_statement
&&
instanceof_expression
(
modifiers
^
null_literal
while
%=
with
package
constructor_body
/
implements
throws
try_with_resources_statement
method_invocation
%
>>>
enum_body_declarations
while_statement
character_literal
program
cast_expression
case
short
array_initializer
marker_annotation
type_parameters
update_expression
if
scoped_type_identifier
module
inferred_parameters
for
+
unary_expression
>>>=
private
[
-=
dimensions
spread_parameter
false
class
expression_statement
_type
::
switch_block
*=
binary_integer_literal
octal_integer_literal
class_literal
interface_body
formal_parameters
annotation
<<=
hex_integer_literal
catch_type
receiver_parameter
,
identifier
decimal_integer_literal
annotation_type_body
)
>>
else
type_bound
element_value_array_initializer
method_declaration
interface
floating_point_type
asterisk
]
true
annotation_type_declaration
array_type
instanceof
void_type
static_initializer
break_statement
try_statement
>=
double
...
if_statement
resource_specification
==
package_declaration
/=
type_parameter
?
^=
module_directive
do
public
switch
strictfp
string_literal
argument_list
element_value_pair
synchronized
wildcard
return
transient
to
long
&
&=
object_creation_expression
catch
formal_parameter
enum_declaration
annotation_type_element_declaration
enhanced_for_statement
labeled_statement
++
char
extends_interfaces
field_access
>
uses
