>=
*=
/=
_declaration
pair
number
]
computed_property_name
shorthand_property_identifier
for_in_statement
~
return
:
^=
%
ternary_expression
>
async
null
${
>>>=
&
catch_clause
switch_statement
variable_declarator
const
break_statement
named_imports
sequence_expression
continue
===
typeof
)
@
_statement
class_declaration
string
statement_block
object
super
with_statement
break
?
import_statement
+
delete
for_statement
void
augmented_assignment_expression
do
do_statement
array_pattern
property_identifier
??
object_pattern
regex_flags
class_body
var
import
new_expression
.
export_clause
function_declaration
??=
yield
switch
rest_parameter
template_string
switch_case
call_expression
switch_body
=
if
for
jsx_opening_element
jsx_expression
/
debugger
jsx_self_closing_element
formal_parameters
false
%=
debugger_statement
expression_statement
nested_identifier
&&=
switch_default
;
jsx_fragment
<<=
await
new
^
target
}
>>
while_statement
|
**
as
true
try_statement
continue_statement
arguments
<
<<
undefined
<=
_expression
,
finally_clause
**=
||
return_statement
jsx_namespace_name
else
hash_bang_line
empty_statement
template_substitution
finally
extends
instanceof
import_clause
catch
with
this
jsx_attribute
jsx_element
export
identifier
arrow_function
function
parenthesized_expression
default
meta_property
program
spread_element
?.
yield_expression
!=
"
*
decorator
-=
else_clause
subscript_expression
=>
+=
--
let
regex_pattern
class
method_definition
try
||=
set
export_specifier
generator_function
throw_statement
!
|=
lexical_declaration
binary_expression
static
unary_expression
from
variable_declaration
>>>
get
assignment_pattern
jsx_closing_element
!==
[
comment
in
array
throw
assignment_expression
labeled_statement
generator_function_declaration
class_heritage
public_field_definition
(
==
>>=
case
{
jsx_text
import_specifier
while
statement_identifier
regex
...
&&
-
if_statement
await_expression
of
update_expression
++
namespace_import
member_expression
`
&=
_destructuring_pattern
export_statement
escape_sequence
'
