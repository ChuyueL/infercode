preproc_call
new_declarator
enumerator_list
struct_specifier
abstract_function_declarator
access_specifier
__attribute__
-
break
catch_clause
virtual_specifier
constexpr
number_literal
pointer_declarator
ms_based_modifier
preproc_defined
enumerator
field_declaration_list
;
case_statement
register
struct
|=
scoped_identifier
operator
_statement
_type_specifier
namespace
type_identifier
u8"
mutable
function_definition
abstract_array_declarator
--
operator_name
field_declaration
switch_statement
]]
.
variadic_declarator
using
||
volatile
static
+=
U"
scoped_namespace_identifier
operator_cast
explicit_function_specifier
#else
structured_binding_declarator
L'
concatenated_string
preproc_directive
nullptr
protected
namespace_definition
binary_expression
array_declarator
typedef
sizeof_expression
function_declarator
static_assert
>>=
!=
L"
<<
#ifndef
{
__based
try
continue
delete
!
conditional_expression
lambda_expression
#if
restrict
|
optional_parameter_declaration
__vectorcall
new
u'
return_statement
parameter_declaration
delete_expression
throw
explicit
:
parenthesized_expression
decltype
trailing_return_type
preproc_include
->
_type_declarator
<=
while
ms_pointer_modifier
comma_expression
abstract_pointer_declarator
noexcept
storage_class_specifier
preproc_if
template_parameter_list
defined
for_statement
unsigned
preproc_function_def
<
throw_statement
init_declarator
auto
_declarator
__unaligned
class_specifier
preproc_arg
linkage_specification
friend_declaration
call_expression
default
enum
condition_clause
system_lib_string
type_descriptor
alias_declaration
throw_specifier
assignment_expression
parameter_pack_expansion
*
~
field_identifier
destructor_name
pointer_expression
declaration
final
override
primitive_type
ms_declspec_modifier
this
do_statement
subscript_designator
template_type
type_parameter_declaration
template_argument_list
dependent_type
__stdcall
compound_literal_expression
_abstract_declarator
field_initializer
=
U'
continue_statement
&&
__thiscall
compound_statement
(
^
inline
reference_declarator
union_specifier
#define
%=
variadic_parameter_declaration
#elif
attribute_specifier
%
/
_Atomic
while_statement
field_expression
bitfield_clause
preproc_def
__declspec
u"
#endif
cast_expression
case
ms_unsigned_ptr_modifier
short
ms_restrict_modifier
"
lambda_capture_specifier
extern
preproc_params
scoped_field_identifier
update_expression
if
scoped_type_identifier
preproc_else
__fastcall
sizeof
enum_specifier
_unaligned
delete_method_clause
new_expression
template_template_parameter_declaration
for
+
unary_expression
private
__clrcall
field_designator
[
const
-=
ms_call_modifier
typename
initializer_pair
optional_type_parameter_declaration
false
class
_expression
expression_statement
virtual_function_specifier
::
escape_sequence
*=
static_assert_declaration
_field_declarator
default_method_clause
translation_unit
goto
<<=
identifier
goto_statement
union
template_declaration
attribute
initializer_list
parenthesized_declarator
type_qualifier
,
)
raw_string_literal
sized_type_specifier
statement_identifier
template_method
abstract_reference_declarator
ms_unaligned_ptr_modifier
>>
preproc_ifdef
template_function
__cdecl
else
true
]
break_statement
declaration_list
for_range_loop
try_statement
type_definition
...
>=
if_statement
?
==
do
/=
field_initializer_list
ms_signed_ptr_modifier
[[
^=
public
switch
string_literal
argument_list
virtual
using_declaration
parameter_list
abstract_parenthesized_declarator
char_literal
variadic_type_parameter_declaration
return
preproc_elif
template_instantiation
long
&
&=
subscript_expression
'
signed
catch
lambda_default_capture
#include
template
friend
namespace_identifier
null
labeled_statement
++
u8'
#ifdef
}
>
base_class_clause
