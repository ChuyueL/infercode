>=
friend
preproc_call
operator_cast
*=
/=
ms_unsigned_ptr_modifier
]
ms_signed_ptr_modifier
~
lambda_default_capture
return
protected
:
^=
destructor_name
template_type
%
>
using_declaration
parameter_pack_expansion
null
array_declarator
field_initializer
&
catch_clause
switch_statement
override
preproc_ifdef
const
break_statement
goto_statement
continue
attribute
lambda_expression
field_initializer_list
::
__clrcall
)
structured_binding_declarator
ms_call_modifier
scoped_type_identifier
_statement
type_parameter_declaration
mutable
cast_expression
ms_unaligned_ptr_modifier
typename
using
linkage_specification
__vectorcall
ms_declspec_modifier
template_parameter_list
static_assert_declaration
break
short
u8"
attribute_specifier
base_class_clause
variadic_declarator
?
delete
+
#include
long
type_definition
type_identifier
#define
field_designator
for_statement
parameter_declaration
pointer_expression
sizeof_expression
field_identifier
_type_declarator
do
do_statement
init_declarator
_Atomic
variadic_type_parameter_declaration
abstract_reference_declarator
declaration
goto
primitive_type
static_assert
__cdecl
template_declaration
new_expression
preproc_elif
preproc_function_def
defined
.
L'
function_declarator
public
switch
reference_declarator
preproc_def
virtual_specifier
call_expression
#elif
#else
delete_expression
preproc_include
scoped_field_identifier
noexcept
=
auto
if
'
scoped_identifier
for
inline
preproc_directive
/
__attribute__
false
operator
storage_class_specifier
type_descriptor
%=
U'
L"
#endif
expression_statement
[[
typedef
_field_declarator
__unaligned
optional_type_parameter_declaration
pointer_declarator
;
<<=
constexpr
__based
ms_pointer_modifier
new
field_expression
^
struct
>>
}
access_specifier
while_statement
namespace_definition
new_declarator
|
true
condition_clause
enum
try_statement
ms_based_modifier
continue_statement
<
<<
field_declaration_list
<=
_expression
private
nullptr
#ifndef
,
sized_type_specifier
argument_list
declaration_list
enumerator
translation_unit
]]
return_statement
system_lib_string
||
else
template_argument_list
number_literal
explicit
catch
final
preproc_if
union_specifier
lambda_capture_specifier
parameter_list
namespace_identifier
this
preproc_defined
identifier
template
virtual_function_specifier
parenthesized_expression
_unaligned
default
_type_specifier
decltype
scoped_namespace_identifier
!=
"
*
_declarator
namespace
alias_declaration
-=
subscript_designator
register
optional_parameter_declaration
concatenated_string
comma_expression
subscript_expression
abstract_function_declarator
+=
--
abstract_parenthesized_declarator
class
try
union
__stdcall
unsigned
struct_specifier
throw_statement
!
raw_string_literal
parenthesized_declarator
delete_method_clause
preproc_arg
|=
template_instantiation
bitfield_clause
virtual
compound_literal_expression
binary_expression
static
initializer_list
unary_expression
#if
string_literal
_abstract_declarator
template_method
[
restrict
throw
assignment_expression
for_range_loop
default_method_clause
labeled_statement
preproc_else
(
>>=
==
U"
case
__thiscall
{
compound_statement
while
dependent_type
throw_specifier
preproc_params
initializer_pair
statement_identifier
#ifdef
type_qualifier
u8'
field_declaration
template_template_parameter_declaration
case_statement
&&
explicit_function_specifier
...
->
trailing_return_type
-
abstract_pointer_declarator
char_literal
u"
if_statement
class_specifier
variadic_parameter_declaration
operator_name
signed
u'
sizeof
update_expression
++
friend_declaration
extern
enumerator_list
enum_specifier
template_function
&=
escape_sequence
__declspec
volatile
__fastcall
abstract_array_declarator
ms_restrict_modifier
function_definition
conditional_expression
