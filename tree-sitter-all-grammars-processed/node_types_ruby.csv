>=
and
instance_variable
*=
/=
splat_argument
pair
]
end_block
~
#{
return
:
^=
call
%
>
block
block_parameters
&
when
===
method
-@
::
subshell
)
uninterpreted
_statement
string
heredoc_body
=~
!~
_lhs
hash
super
nil
break
+@
alias
range
unless
begin_block
+
?
block_argument
module
do
<=>
[]
heredoc_content
bare_symbol
assignment
unless_modifier
superclass
.
yield
singleton_method
until_modifier
destructured_left_assignment
parenthesized_statements
do_block
if_modifier
=
until
if
%i(
heredoc_beginning
for
_primary
/
..
false
operator
%=
self
rescue
singleton_class
&&=
retry
pattern
;
<<=
splat_parameter
scope_resolution
^
}
>>
|
begin
**
true
hash_splat_argument
left_assignment_list
<
next
<<
<=
,
lambda_parameters
argument_list
**=
||
_method_name
else
r
[]=
empty_statement
not
binary
character
setter
identifier
keyword_parameter
heredoc_end
program
!=
"
*
end
conditional
string_content
-=
_arg
symbol_array
block_parameter
hash_splat_parameter
:"
+=
=>
defined?
||=
class
!
symbol
destructured_parameter
|=
undef
elsif
unary
chained_string
ensure
constant
integer
element_reference
then
_variable
operator_assignment
exceptions
exception_variable
[
in
comment
array
method_parameters
rest_assignment
>>=
case
(
==
{
def
while
rational
redo
regex
bare_string
...
&&
class_variable
while_modifier
->
BEGIN
lambda
optional_parameter
-
%w(
global_variable
interpolation
float
rescue_modifier
END
&.
string_array
__END__
right_assignment_list
or
`
complex
&=
escape_sequence
