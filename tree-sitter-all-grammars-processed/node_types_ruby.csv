+@
retry
interpolation
-
break
===
;
|=
defined?
exception_variable
operator
scope_resolution
_statement
string
BEGIN
super
END
_method_name
.
rational
exceptions
or
string_content
||
binary
+=
alias
then
optional_parameter
empty_statement
singleton_class
comment
setter
assignment
>>=
!=
<=>
lambda
<<
hash
{
splat_parameter
!
array
|
begin_block
destructured_parameter
:
**=
hash_splat_argument
superclass
->
<=
ensure
not
regex
in
unless_modifier
block
[]=
elsif
<
begin
string_array
redo
splat_argument
integer
r
until_modifier
operator_assignment
&&=
_primary
end_block
pattern
*
~
undef
heredoc_end
_arg
unless
[]
rescue_modifier
until
subshell
unary
uninterpreted
=
while
float
&&
heredoc_beginning
(
^
||=
%=
while_modifier
def
bare_string
%w(
/
%
_variable
destructured_left_assignment
lambda_parameters
heredoc_body
program
nil
case
"
rest_assignment
block_parameters
if
global_variable
`
block_parameter
call
parenthesized_statements
module
!~
=>
for
right_assignment_list
+
[
if_modifier
conditional
-=
&.
false
class
hash_splat_parameter
::
escape_sequence
*=
class_variable
end
when
yield
self
**
instance_variable
and
symbol
%i(
<<=
=~
,
identifier
)
complex
>>
else
constant
true
]
>=
block_argument
...
method_parameters
?
element_reference
do
singleton_method
#{
/=
==
^=
:"
keyword_parameter
rescue
chained_string
_lhs
argument_list
return
do_block
next
&
&=
pair
left_assignment_list
character
symbol_array
method
-@
..
__END__
range
}
heredoc_content
>
bare_symbol
