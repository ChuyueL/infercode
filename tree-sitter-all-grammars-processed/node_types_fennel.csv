>=
and
loadfile
xpcall
assert
local
_VERSION
number
]
when_statement
sequential_table
%
>
multi-sym?
table?
dofile
hashfn
_G
require
when
multi_value_assignment
each_clause
_ENV
rawequal
var_definition
)
string
parameters
nil
quoted_value
tonumber
+
tset
eval-compiler
error
do
do_statement
include
-?>>
var
assignment
package
collectgarbage
//
.
select
let_definition
=
if
pcall
for
/
..
list
local_definition
false
#
global
global_definition
sym
value_list
table
rawget
setmetatable
->>
field_expression
^
}
true
arg
macrodebug
<
next
debug
<=
macro
for_clause
boolean
,
not=
print
require-macros
lambda_definition
assignments
not
rawset
identifier
tostring
program
"
-?>
*
loadstring
ipairs
unquoted_value
getmetatable
hash_function_definition
rawlen
let
list?
set
match
sym?
each
Î»
macroexpand
[
comment
sequence?
(
{
load
match_statement
macros
while
function_call
in-scope?
...
->
unpack
lambda
doto
-
field
if_statement
varg?
gensym
import-macros
or
`
function_definition
pairs
coroutine
type
'
fn
