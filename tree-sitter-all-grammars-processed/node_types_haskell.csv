exp_literal
exp_let_in
guard_equation
prim
-
context
forall
infix
;
con_list
data_instance
operator
jvm
namespace
import_item
patterns
pat_infix
string
newtype_constructor
gdpat
guards
<-
exp_section_right
.
empty_file
data_constructor_record
data_constructor
foreign_import
label
then
phantom
con_tuple
type_list
signature
instance
âˆ€
comment
float
unsafe
decl_tyfam_sig
comma
deriving
mdo
gadt_constructor
class_name
export_names
let
{
exp_unboxed_sum
type_instance
''
representational
anyclass
pat_wildcard
of
|
import
constraint
qualified_module
exp_let
head
exp_case
promoted
ticked
via
hiding
->
interruptible
exp_name
class_body
stdcall
type
in
stock
strict_type
do_module
exp_section_left
splice
capi
field
type_unboxed_sum
all_names
integer
type_literal
alts
cplusplus
default
bind_pattern
fixity
qualified_operator
family
pat_irrefutable
variable
implicit_param
inst_tyinst
pattern
instance_head
newtype
@
(# 
~
type_role
ccall
exp_negation
type_parens
role
type_name
exp_list_comprehension
alt
data_family
exp_tuple
type_family
\
pat_parens
exp_record
type_tuple
varop
exports
data
=
foreign_export
pat_list
constructor_operator
pat_unboxed_tuple
(
exp_list
type_infix
qualified_constructor
function
exp_sum_empty
infixl
cpp
exp_lambda_case
stmt
pat_literal
where
type_operator
default_declaration
case
pat_as
exp_in
pat_typed
calling_convention
if
quantifiers
`
guard
=>
module
fun
quoter
exp_type_application
exp_cond
pattern_guard
qualified_type_operator
qualified_type
quasiquote_body
exp_if_guard
[
dotnet
pattern_synonym
pat_apply
exp_unboxed_tuple
implicit_parid
nominal
con_unit
safety
class
import_con_names
decl_type
pat_record
quasiquote
exp_do
::
haskell
annotated_type_variable
decls
qualified_constructor_operator
safe
tycon_arrow
exp_parens
)
top_splice
type_unboxed_tuple
else
record_fields
type_star
exp_infix
adt
impent
type_alias
pat_field
exp_apply
]
constructors
exp_lambda
pragma
equation
exp_arithmetic_sequence
expent
pat_negation
pat_tuple
do
qualified
exp_th_quoted_name
default_signature
rec
type_apply
|]
import_list
qual
inst_datainst
role_annotation
wildcard
qualified_variable
pat_strict
fundeps
export
type_variable
pat_fields
deriving_strategy
pat_view
'
_
infixr
class_head
import_package
..
pat_name
exp_field
deriving_declaration
as
char
data_constructor_infix
}
foreign
constructor
fundep
