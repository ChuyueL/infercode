interpolation_format_clause
property_pattern_clause
internal
return
:
attribute_argument
parenthesized_pattern
>
block
Cdecl
catch_clause
switch_statement
variable_declarator
_type
break_statement
)
element_binding_expression
_statement
function_pointer_type
class_declaration
type_parameter_list
anonymous_object_creation_expression
+
partial
for_statement
case_pattern_switch_label
binary_pattern
preprocessor_call
recursive_pattern
var
argument
$@"
query_continuation
for
type_parameter_constraints_clause
/
..
global
%=
expression_statement
extern_alias_directive
await
as
name_equals
try_statement
<
<=
catch_declaration
return_statement
equals_value_clause
checked_expression
parameter_list
this
assignment_operator
constructor_declaration
"
*
where
sealed
class
param
throw_statement
!
implicit_array_creation_expression
|=
orderby
anonymous_method_expression
variable_declaration
interpolated_verbatim_string_text
in
ref_value_expression
assignment_expression
global_statement
throw_expression
$"
case
ref
group_clause
null_literal
compilation_unit
is
ref_expression
real_literal
out
array_creation_expression
if_statement
interpolation
attribute_argument_list
extern
volatile
'
unchecked
bracketed_parameter_list
/=
namespace_declaration
""
%
unsafe_statement
async
lock_statement
const
explicit_interface_specifier
typeof
::
indexer_declaration
function_pointer_unmanaged_calling_convention
alias
verbatim_string_literal
boolean_literal
type_of_expression
using_directive
operator_declaration
module
do
do_statement
invocation_expression
type_pattern
switch_section
unmanaged
__makeref
select
interpolated_string_text
bracketed_argument_list
positional_pattern_clause
switch
catch_filter_clause
switch_body
by
destructor_declaration
false
operator
base_expression
with_expression
arrow_expression_clause
function_pointer_parameter
modifier
label_name
;
relational_pattern
new
while_statement
character_literal
subpattern
enum
constructor_initializer
<<
private
generic_name
when_clause
foreach
finally
function_pointer_calling_convention
simple_assignment_expression
attribute_target_specifier
event
!=
{{
remove
set
tuple_element
where_clause
member_access_expression
implicit
ascending
tuple_expression
virtual
type_constraint
prefix_unary_expression
let_clause
string_literal
[
comment
local_function_statement
declaration_pattern
negated_pattern
tuple_type
parameter
->
object_creation_expression
sizeof
default_switch_label
conversion_operator_declaration
escape_sequence
record_declaration
make_ref_expression
>=
type_parameter_constraint
array_rank_specifier
^=
primary_constructor_base_type
integer_literal
goto_statement
method
delegate_declaration
cast_expression
using
alias_qualified_name
Thiscall
break
?
readonly
join_clause
attribute_list
managed
ref_type_expression
interface
descending
preprocessor_directive
??=
record
yield
__reftype
constructor_constraint
=
from_clause
event_declaration
type_parameter
enum_member_declaration_list
pointer_type
using_statement
equals
<<=
^
struct
>>
array_type
group
Stdcall
true
lock
_expression
argument_list
declaration_list
finally_clause
implicit_stack_alloc_array_creation_expression
yield_statement
on
with
implicit_object_creation_expression
parameter_array
identifier
default
parenthesized_variable_designation
range_expression
namespace
conditional_access_expression
event_field_declaration
=>
+=
try
enum_declaration
interpolated_string_expression
predefined_type
join_into_clause
is_pattern_expression
binary_expression
from
base_list
checked
function_pointer_unmanaged_calling_convention_list
throw
postfix_unary_expression
(
global_attribute_list
element_access_expression
join
enum_member_declaration
type_argument_list
__refvalue
-
field
await_expression
++
accessor_list
method_declaration
type
and
*=
_declaration
struct_declaration
]
switch_expression_arm
~
constant_pattern
protected
delegate
stackalloc
params
default_expression
this_expression
&
override
query_expression
when
continue
attribute
lambda_expression
accessor_declaration
property
order_by_clause
tuple_pattern
??
fixed_statement
goto
initializer_expression
.
interface_declaration
declaration_expression
public
with_initializer_expression
qualified_name
implicit_type
if
base
local_declaration_statement
name_colon
void_keyword
property_declaration
}
size_of_expression
|
case_switch_label
switch_expression
Fastcall
continue_statement
add
,
||
else
empty_statement
explicit
not
catch
parenthesized_expression
into
select_clause
parameter_modifier
-=
--
let
notnull
stack_alloc_array_creation_expression
init
unsafe
dynamic
var_pattern
interpolation_alignment_clause
@$"
fixed
static
get
member_binding_expression
assembly
labeled_statement
>>=
{
==
while
field_declaration
nameof
&&
discard
checked_statement
abstract
or
&=
nullable_type
for_each_statement
conditional_expression
