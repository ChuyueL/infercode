>=
preproc_call
*=
/=
ms_unsigned_ptr_modifier
]
ms_signed_ptr_modifier
~
return
:
^=
%
>
null
array_declarator
&
switch_statement
preproc_ifdef
const
break_statement
goto_statement
continue
__clrcall
)
ms_call_modifier
_statement
cast_expression
ms_unaligned_ptr_modifier
linkage_specification
__vectorcall
ms_declspec_modifier
break
short
u8"
attribute_specifier
?
long
+
#include
type_identifier
type_definition
#define
field_designator
for_statement
parameter_declaration
pointer_expression
sizeof_expression
field_identifier
_type_declarator
do
do_statement
init_declarator
_Atomic
declaration
goto
primitive_type
__cdecl
preproc_function_def
preproc_elif
defined
.
L'
function_declarator
switch
preproc_def
#elif
call_expression
#else
preproc_include
=
auto
if
inline
preproc_directive
'
for
/
__attribute__
false
storage_class_specifier
type_descriptor
%=
U'
L"
#endif
expression_statement
typedef
_field_declarator
__unaligned
pointer_declarator
;
<<=
__based
ms_pointer_modifier
field_expression
^
struct
>>
}
while_statement
|
true
enum
ms_based_modifier
continue_statement
<
<<
field_declaration_list
<=
_expression
#ifndef
,
sized_type_specifier
argument_list
declaration_list
enumerator
translation_unit
||
return_statement
system_lib_string
else
number_literal
preproc_if
union_specifier
parameter_list
preproc_defined
identifier
_unaligned
parenthesized_expression
default
_type_specifier
!=
"
*
_declarator
register
-=
subscript_designator
concatenated_string
comma_expression
subscript_expression
abstract_function_declarator
+=
--
abstract_parenthesized_declarator
union
__stdcall
unsigned
struct_specifier
!
parenthesized_declarator
preproc_arg
|=
bitfield_clause
compound_literal_expression
binary_expression
static
initializer_list
unary_expression
#if
string_literal
_abstract_declarator
[
comment
restrict
assignment_expression
labeled_statement
preproc_else
U"
>>=
(
case
==
{
__thiscall
compound_statement
while
preproc_params
initializer_pair
statement_identifier
#ifdef
type_qualifier
u8'
field_declaration
case_statement
&&
...
->
macro_type_specifier
-
abstract_pointer_declarator
char_literal
u"
if_statement
signed
u'
sizeof
update_expression
++
extern
enumerator_list
enum_specifier
&=
escape_sequence
__declspec
volatile
__fastcall
abstract_array_declarator
ms_restrict_modifier
function_definition
conditional_expression
