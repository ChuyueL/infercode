preproc_call
enumerator_list
struct_specifier
abstract_function_declarator
__attribute__
-
break
number_literal
pointer_declarator
preproc_defined
ms_based_modifier
enumerator
field_declaration_list
;
case_statement
register
struct
|=
_statement
_type_specifier
u8"
type_identifier
function_definition
abstract_array_declarator
--
field_declaration
switch_statement
.
||
volatile
static
+=
U"
preproc_directive
#else
L'
concatenated_string
comment
typedef
binary_expression
array_declarator
sizeof_expression
function_declarator
>>=
!=
L"
<<
#ifndef
{
__based
continue
!
conditional_expression
#if
restrict
|
__vectorcall
u'
return_statement
parameter_declaration
:
parenthesized_expression
preproc_include
->
_type_declarator
<=
ms_pointer_modifier
comma_expression
abstract_pointer_declarator
unsigned
storage_class_specifier
preproc_if
defined
for_statement
preproc_function_def
<
init_declarator
auto
_declarator
__unaligned
preproc_arg
linkage_specification
call_expression
default
enum
system_lib_string
type_descriptor
assignment_expression
*
~
field_identifier
pointer_expression
declaration
primitive_type
ms_declspec_modifier
do_statement
subscript_designator
__stdcall
compound_literal_expression
_abstract_declarator
U'
=
__thiscall
continue_statement
&&
inline
compound_statement
(
^
while
#define
union_specifier
%=
#elif
/
attribute_specifier
%
_Atomic
while_statement
field_expression
bitfield_clause
preproc_def
__declspec
u"
#endif
cast_expression
case
ms_unsigned_ptr_modifier
short
ms_restrict_modifier
"
extern
preproc_params
update_expression
if
preproc_else
__fastcall
sizeof
enum_specifier
_unaligned
for
+
unary_expression
__clrcall
field_designator
[
const
-=
ms_call_modifier
initializer_pair
false
_expression
expression_statement
escape_sequence
*=
_field_declarator
translation_unit
goto
<<=
identifier
goto_statement
union
type_qualifier
initializer_list
,
parenthesized_declarator
statement_identifier
)
sized_type_specifier
>>
else
ms_unaligned_ptr_modifier
__cdecl
preproc_ifdef
true
]
break_statement
declaration_list
macro_type_specifier
type_definition
>=
...
if_statement
?
==
do
/=
ms_signed_ptr_modifier
^=
switch
string_literal
argument_list
parameter_list
abstract_parenthesized_declarator
char_literal
return
preproc_elif
long
&
&=
subscript_expression
'
signed
#include
null
labeled_statement
++
u8'
#ifdef
}
>
