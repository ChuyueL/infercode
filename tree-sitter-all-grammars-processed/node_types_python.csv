>=
and
*=
/=
assert
pair
]
tuple
~
return
:
^=
raise_statement
call
%
>
async
block
generator_expression
&
break_statement
unary_operator
continue
attribute
)
@
pass_statement
dotted_name
string
class_definition
parameters
with_statement
break
import_statement
+
for_statement
format_specifier
tuple_pattern
module
import_from_statement
@=
import_prefix
typed_parameter
dictionary
list_pattern
import
assignment
:=
delete_statement
comparison_operator
//
list_splat_pattern
.
yield
if_clause
list_comprehension
=
if
nonlocal_statement
for
/
print_statement
list
false
global
relative_import
%=
wildcard_import
expression_statement
for_in_clause
pattern
<<=
await
default_parameter
elif_clause
with_item
^
}
>>
while_statement
|
_compound_statement
**
as
dictionary_comprehension
true
try_statement
continue_statement
<
<<
boolean_operator
<=
,
primary_expression
lambda_parameters
argument_list
finally_clause
**=
future_import_statement
named_expression
return_statement
print
except
else
list_splat
__future__
finally
not
with
set_comprehension
dictionary_splat_pattern
identifier
parenthesized_expression
type_conversion
nonlocal
subscript
!=
"
*
ellipsis
decorator
exec
-=
aliased_import
else_clause
expression_list
concatenated_string
+=
try
class
pass
set
format_expression
decorated_definition
not_operator
parenthesized_list_splat
exec_statement
keyword_argument
slice
|=
pattern_list
integer
from
_simple_statement
chevron
[
comment
in
except_clause
global_statement
>>=
(
{
==
def
none
while
<>
parameter
elif
is
raise
->
lambda
-
//=
if_statement
interpolation
float
augmented_assignment
binary_operator
typed_default_parameter
del
or
dictionary_splat
&=
escape_sequence
expression
type
function_definition
assert_statement
conditional_expression
