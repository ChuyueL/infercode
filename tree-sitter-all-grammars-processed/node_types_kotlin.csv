conjunction_expression
package_header
range_expression
value_arguments
parameter_modifier
when_expression
variance_modifier
return@
crossinline
unsigned_literal
-
when_condition
enum_entry
type_projection_modifiers
parameter_with_optional_type
===
break
infix
;
type_test
import_header
boolean_literal
operator
function_modifier
type_identifier
val
finally
super
--
"""
.
this_expression
comparison_expression
if_expression
variable_declaration
by
||
multiplicative_expression
label
+=
bin_literal
getter
type_parameter_modifiers
delegate
indexing_suffix
protected
reification_modifier
interpolated_expression
setter
additive_expression
assignment
!=
import_alias
typealias
companion_object
this@
equality_expression
{
is
continue
try
!
out
class_modifier
try_expression
expect
import
receiver
parameter
inner
throw
constructor_delegation_call
type_constraint
:
parenthesized_expression
class_declaration
type_constraints
$
->
<=
object
jump_expression
nullable_type
class_body
init
directly_assignable_expression
shebang_line
for_statement
u
in
<
type_arguments
enum_class_body
get
dynamic
field
tailrec
open
call_expression
enum
prefix_expression
multi_line_string_literal
function_body
!==
*
@
navigation_suffix
long_literal
abstract
lambda_literal
final
use_site_target
primary_constructor
override
real_literal
this
indexing_expression
property_delegate
actual
infix_expression
\
elvis_expression
data
spread_expression
=
inline
&&
while
(
modifiers
%=
package
platform_modifier
/
simple_identifier
%
break@
where
character_literal
while_statement
lambda_parameters
!in
when_subject
value_argument
property_modifier
collection_literal
annotated_lambda
navigation_expression
type_parameters
call_suffix
"
?:
constructor_invocation
if
secondary_constructor
fun
member_modifier
internal
set
for
+
line_string_literal
delegation_specifier
user_type
private
[
postfix_expression
super@
type_projection
setparam
-=
false
class
suspend
control_structure_body
::
object_declaration
object_literal
*=
explicit_delegation
lateinit
when
hex_literal
do_while_statement
inheritance_modifier
function_type_parameters
finally_block
identifier
annotation
continue@
,
class_parameter
)
noinline
statements
else
as?
interface
type_modifiers
${
type_alias
true
]
#!
super_expression
function_type
visibility_modifier
L
sealed
callable_reference
as_expression
>=
param
==
do
/=
type_parameter
integer_literal
public
parenthesized_user_type
companion
parenthesized_type
parameter_modifiers
source_file
return
range_test
.*
anonymous_function
when_entry
'
property
disjunction_expression
catch_block
catch
interpolated_identifier
property_declaration
check_expression
anonymous_initializer
..
external
vararg
file
as
null
++
file_annotation
var
function_declaration
!!
}
>
constructor
