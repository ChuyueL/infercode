in
receiver
finally
vararg
type_identifier
type_projection
label
==
public
import_header
class_parameter
'
anonymous_function
as_expression
*
dynamic
tailrec
explicit_delegation
while_statement
type_parameter_modifiers
function_modifier
%
noinline
enum_class_body
range_test
do
parameter_modifier
parenthesized_user_type
!==
;
/=
user_type
constructor_invocation
setparam
try
{
shebang_line
init
navigation_expression
property_modifier
parameter_modifiers
super
identifier
.
this@
>=
open
,
integer_literal
-=
expect
statements
->
typealias
--
import_alias
class_declaration
final
continue@
reification_modifier
\
suspend
property_delegate
lambda_literal
file
if
break@
override
elvis_expression
class
null
directly_assignable_expression
[
assignment
operator
multiplicative_expression
class_body
]
-
.*
constructor_delegation_call
lambda_parameters
nullable_type
parenthesized_expression
property_declaration
property
type_alias
type_constraint
external
this
!in
+=
enum
infix_expression
when_subject
>
protected
<
L
function_declaration
data
||
function_body
this_expression
visibility_modifier
type_arguments
*=
secondary_constructor
===
value_argument
character_literal
$
postfix_expression
when_entry
sealed
return
primary_constructor
inline
}
file_annotation
false
=
when_expression
enum_entry
"
)
finally_block
call_expression
::
modifiers
+
@
infix
unsigned_literal
where
call_suffix
true
interface
parameter
set
val
inner
++
${
class_modifier
super@
hex_literal
delegation_specifier
private
function_type
as
field
&&
check_expression
control_structure_body
additive_expression
comparison_expression
type_projection_modifiers
actual
package_header
value_arguments
setter
source_file
param
range_expression
/
if_expression
long_literal
member_modifier
try_expression
bin_literal
variance_modifier
throw
!!
!=
get
interpolated_identifier
delegate
object_literal
inheritance_modifier
indexing_expression
disjunction_expression
constructor
lateinit
"""
else
crossinline
?:
fun
:
for
u
variable_declaration
type_parameters
as?
package
line_string_literal
type_modifiers
catch_block
internal
real_literal
annotation
<=
function_type_parameters
(
by
indexing_suffix
boolean_literal
type_parameter
return@
callable_reference
object_declaration
continue
annotated_lambda
spread_expression
type_test
use_site_target
conjunction_expression
abstract
companion
%=
import
is
out
when
platform_modifier
while
getter
simple_identifier
collection_literal
prefix_expression
..
#!
var
super_expression
multi_line_string_literal
anonymous_initializer
break
object
type_constraints
equality_expression
companion_object
do_while_statement
interpolated_expression
catch
when_condition
navigation_suffix
!
for_statement
jump_expression
parenthesized_type
parameter_with_optional_type
